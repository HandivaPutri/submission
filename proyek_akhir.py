# -*- coding: utf-8 -*-
"""proyek-akhir.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1xcHjTqnS-zJAv572k18FaCJcQxT5-Bf_

# **Proyek Analisa Data : Bike Sharing Dataset**

*   Nama : Rayi Handiva Putri
*   Email : handivaputri15@gmail.com
*   ID Dicoding :

# Menentukan Pertanyaan Bisnis

*   Bagaimana pengaruh cuaca(season) terhadap jumlah sewa sepeda harian (count)?
*   Berapa banyak sepeda yang disewakan setiap bulan(month) pada setiap musim(season)?

# Menyiapkan library yang dibutuhkan
"""

# import library

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

"""## Data Wrangling

### Gathering Data
"""

days_df = pd.read_csv("https://raw.githubusercontent.com/HandivaPutri/submission/main/day.csv")
days_df.head() # untuk menampilkan 5 baris pertama

hours_df = pd.read_csv("https://raw.githubusercontent.com/HandivaPutri/submission/main/hour.csv")
hours_df.head()

"""### Assesing Data

bertujuan untuk mengidentifikasi masalah yang terdapat dalam data dan memastikan data tersebut berkualitas. Selain itu juga melakukan pengecekan terhadap data seperti apakah terdapat missing value, duplicate data, dan sebagainya.

#### Menilai tabel days_df
"""

days_df.info() # digunakan untuk menampilkan informasi detail tentang dataframe

days_df.isna().sum() # digunakan untuk mengecek apakah ada nilai NaN pada dataframe

"""Tidak terdapat missing value pada kolom days_df"""

print("Jumlah duplikasi: ", days_df.duplicated().sum())
days_df.describe()

"""#### Menilai tabel hours_df



"""

hours_df.info()

hours_df.isna().sum()

"""Tidak terdapat missing value pada kolom hours_df"""

print("Jumlah duplikasi: ", hours_df.duplicated().sum())
hours_df.describe()

"""### Cleaning Data

bertujuan untuk membersihkan data yang kotor agar tidak terpengaruh dengan hasil analisa nantinya.

#### Membersihkan tabel days_df
"""

days_df.info()

"""**Cara menganti Tipe Data**"""

datetime_columns = ["dteday"]

for column in datetime_columns:
  days_df[column] = pd.to_datetime(days_df[column])

days_df.info()

"""menganti tipe data yang terdapat pada dteday dari object menjadi datetime"""

days_df.head()

"""#### Membersihkan tabel hours_df"""

hours_df.info()

"""**Cara menganti Tipe Data**"""

datetime_columns = ["dteday"]

for column in datetime_columns:
  hours_df[column] = pd.to_datetime(hours_df[column])

hours_df.info()

"""menganti tipe data yang terdapat dteday dari object menjadi datetime"""

hours_df.head()

"""### Menggabungkan Data

#### Menggabungkan data days_df dan hours_df
"""

bike_sharing_df = pd.merge(
    left=days_df,
    right=hours_df,
    how="inner",
    left_on="dteday",
    right_on="dteday",
    suffixes=('_daily', '_hourly'),
)
bike_sharing_df.head()

bike_sharing_df['season_daily'] = bike_sharing_df['season_daily'].map({1: 'Spring',
                                       2: 'Summer',
                                       3: 'Fall',
                                       4: 'Winter'})

bike_sharing_df.head()

bike_sharing_df.info() # digunakan untuk menampilkan informasi detail tentang dataframe

bike_sharing_df.isna().sum()

"""tidak terdapat missing value pada kolom bike_sharing_df"""

print("Jumlah duplikasi: ", bike_sharing_df.duplicated().sum())
bike_sharing_df.describe()

"""## Exploratory Data Analysis (EDA)

### Eksplorasi Data days_df
"""

days_df.describe()

days_df.describe(include="all")

"""### Eksplorasi Data bike_sharing_df"""

bike_sharing_df.describe()

bike_sharing_df.describe(include="all")

bike_sharing_df.instant_daily.is_unique

bike_sharing_df.groupby(by="season_hourly").agg({
    "workingday_hourly": "count", #menjumlahkan penyewa pada hari kerja berdasarkan musim
    "windspeed_hourly": ["max", "min", "mean", lambda x: x.max() - x.min()]  # Membuat fungsi kustom untuk range
}).sort_values(by=("workingday_hourly", "count"), ascending=False)

bike_sharing_df.groupby(by="season_daily").agg({
    "workingday_daily": "count", #menjumlahkan penyewa pada hari kerja berdasarkan musim
    "windspeed_daily": ["max", "min", "mean", lambda x: x.max() - x.min()]  # Membuat fungsi kustom untuk range
}).sort_values(by=("workingday_daily", "count"), ascending=False)

bike_sharing_df.groupby(by="season_daily").mnth_daily.nunique().sort_values(ascending=False)

bike_sharing_df.groupby(by="season_daily").cnt_daily.nunique().sort_values(ascending=False)

bike_sharing_df.groupby(by="season_daily").cnt_hourly.nunique().sort_values(ascending=False)

bike_sharing_df.groupby(by="season_daily").workingday_daily.nunique().sort_values(ascending=False)

bike_sharing_df.groupby(by="mnth_daily").season_daily.nunique().sort_values(ascending=True)

"""## Visualization & Explanatory Analysis

### Bagaimana pengaruh cuaca(season) terhadap jumlah sewa sepeda harian (count)?
"""

bike_sharing_df.sample(5)

bike_df = bike_sharing_df.groupby(by="season_daily").cnt_daily.nunique().reset_index()
bike_df.rename(columns={
    "cnt_daily": "cnt_hourly"
}, inplace=True)
bike_df

bike_df = bike_sharing_df.groupby(by="season_daily").cnt_hourly.nunique().reset_index()
bike_df.rename(columns={
    "cnt_hourly": "cnt_daily"
}, inplace=True)
bike_df

plt.figure(figsize=(10, 5))

colors = ["#72BCD4", "#D3D3D3", "#D3D3D3", "#D3D3D3", "#D3D3D3"]
season_names = ['Spring', 'Summer', 'Fall', 'Winter']

sns.barplot(
    y="cnt_daily",
    x="season_daily",
    data=bike_sharing_df.sort_values(by="season_daily"),
    palette=colors
)
plt.title("Pengaruh cuaca terhadap jumlah sewa sepeda", loc="center", fontsize=15)
plt.ylabel("Rata-rata Jumlah Sewa Harian")
plt.xlabel("Musim")
plt.tick_params(axis='x', labelsize=12)
plt.show()

"""### Musim apa yang paling diminati untuk disewakan setiap bulannya?"""

plt.figure(figsize=(10, 5))
sns.lineplot(x="mnth_daily", y="season_daily",  marker='o', data=bike_sharing_df)
plt.title("Sepeda yang disewakan setiap bulan berdasarkan musim")
plt.xlabel("Bulan")
plt.ylabel("Musim")
plt.show()

"""## Visualization & Explanatory Analysis

### Bagaimana pengaruh cuaca(season) terhadap jumlah sewa sepeda harian (count)?

berdasarkan grafik (bar) diatas, membuktikan bahwa jumlah sewa yang lebih banyak pada musim fall

### Musim apa yang paling diminati untuk disewakan setiap bulannya?

Musim yang paling diminati adalah musim panas (summer) pada awal bulan
"""